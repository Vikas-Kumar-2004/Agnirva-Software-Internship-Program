import streamlit as st  # Import Streamlit library (Commented by Agnirva.com)
import requests  # Import requests library for making HTTP requests (Commented by Agnirva.com)
import pandas as pd  # Import pandas library for data manipulation (Commented by Agnirva.com)
import plotly.express as px  # Import Plotly Express for data visualization (Commented by Agnirva.com)
from datetime import datetime, timedelta  # Import datetime and timedelta for date operations (Commented by Agnirva.com)
import sys  # Import sys module for system-specific parameters and functions (Commented by Agnirva.com)
import io  # Import io module for handling I/O operations (Commented by Agnirva.com)

# Mapping of display names to API body codes (Commented by Agnirva.com)
AgnirvaBODY_CODES = {  # Define a dictionary mapping celestial bodies to their API codes (Commented by Agnirva.com)
    'Mercury': 'Merc',  # Map 'Mercury' to 'Merc' (Commented by Agnirva.com)
    'Venus': 'Venus',  # Map 'Venus' to 'Venus' (Commented by Agnirva.com)
    'Earth': 'Earth',  # Map 'Earth' to 'Earth' (Commented by Agnirva.com)
    'Mars': 'Mars',  # Map 'Mars' to 'Mars' (Commented by Agnirva.com)
    'Jupiter': 'Juptr',  # Map 'Jupiter' to 'Juptr' (Commented by Agnirva.com)
    'Saturn': 'Satrn',  # Map 'Saturn' to 'Satrn' (Commented by Agnirva.com)
    'Uranus': 'Urnus',  # Map 'Uranus' to 'Urnus' (Commented by Agnirva.com)
    'Neptune': 'Neptn',  # Map 'Neptune' to 'Neptn' (Commented by Agnirva.com)
    'Moon': 'Moon'  # Map 'Moon' to 'Moon' (Commented by Agnirva.com)
    # 'Pluto' is excluded as it's not supported by the API (Commented by Agnirva.com)
}

# Function to fetch close approach data (Commented by Agnirva.com)
def Agnirvafetch_close_approaches(Agnirvabody_code='Earth', Agnirvadate_min='now', Agnirvadate_max='+60', Agnirvadist_max='0.05', Agnirvadist_unit='AU', Agnirvalimit=100, Agnirvaobject_type='NEO'):  # Define function with default parameters (Commented by Agnirva.com)
    Agnirvaurl = 'https://ssd-api.jpl.nasa.gov/cad.api'  # Define the API URL (Commented by Agnirva.com)
    Agnirvaparams = {  # Create a dictionary of parameters for the API request (Commented by Agnirva.com)
        'body': Agnirvabody_code,  # Set the celestial body code (Commented by Agnirva.com)
        'date-min': Agnirvadate_min,  # Set the minimum date for the data (Commented by Agnirva.com)
        'date-max': Agnirvadate_max,  # Set the maximum date for the data (Commented by Agnirva.com)
        'dist-max': f"{Agnirvadist_max}{Agnirvadist_unit}",  # Set the maximum distance with unit (Commented by Agnirva.com)
        'limit': Agnirvalimit  # Set the limit for number of results (Commented by Agnirva.com)
    }
    
    # Filter by object type if selected (Commented by Agnirva.com)
    if Agnirvaobject_type == 'NEO':  # Check if object type is Near-Earth Object (Commented by Agnirva.com)
        Agnirvaparams['neo'] = 'true'  # Add 'neo' parameter to API request (Commented by Agnirva.com)
    elif Agnirvaobject_type == 'Comet':  # Check if object type is Comet (Commented by Agnirva.com)
        Agnirvaparams['comet'] = 'true'  # Add 'comet' parameter to API request (Commented by Agnirva.com)
    
    try:  # Start try block to handle potential exceptions (Commented by Agnirva.com)
        Agnirvaresponse = requests.get(Agnirvaurl, params=Agnirvaparams)  # Make GET request to API (Commented by Agnirva.com)
        Agnirvaresponse.raise_for_status()  # Raise HTTPError for bad responses (Commented by Agnirva.com)
        Agnirvadata = Agnirvaresponse.json()  # Parse JSON response (Commented by Agnirva.com)
        return Agnirvadata  # Return the fetched data (Commented by Agnirva.com)
    except requests.exceptions.HTTPError as Agnirvahttp_err:  # Handle HTTP errors (Commented by Agnirva.com)
        st.error(f"‚ö†Ô∏è HTTP error occurred: {Agnirvahttp_err}")  # Display HTTP error message in Streamlit (Commented by Agnirva.com)
        try:  # Start nested try block to parse error details (Commented by Agnirva.com)
            Agnirvaerror_info = Agnirvaresponse.json()  # Attempt to parse error details from response (Commented by Agnirva.com)
            st.error(f"üîç Error details: {Agnirvaerror_info}")  # Display error details in Streamlit (Commented by Agnirva.com)
        except ValueError:  # Handle cases where response is not JSON (Commented by Agnirva.com)
            st.error("üîç No additional error information provided.")  # Inform user no extra error info is available (Commented by Agnirva.com)
        return None  # Return None due to error (Commented by Agnirva.com)
    except requests.exceptions.RequestException as Agnirvae:  # Handle other request exceptions (Commented by Agnirva.com)
        st.error(f"‚ö†Ô∏è Error fetching data from API: {Agnirvae}")  # Display general error message in Streamlit (Commented by Agnirva.com)
        return None  # Return None due to error (Commented by Agnirva.com)

# Function to parse the data (Commented by Agnirva.com)
def Agnirvaparse_data(Agnirvadata):  # Define function to parse API data (Commented by Agnirva.com)
    if Agnirvadata is None or Agnirvadata.get('count', 0) == 0:  # Check if data is empty or count is zero (Commented by Agnirva.com)
        st.warning("‚ö†Ô∏è No close approaches found for the given parameters.")  # Display warning in Streamlit (Commented by Agnirva.com)
        return pd.DataFrame()  # Return empty DataFrame (Commented by Agnirva.com)
    
    Agnirvafields = Agnirvadata.get('fields', [])  # Get field names from data (Commented by Agnirva.com)
    Agnirvarecords = Agnirvadata.get('data', [])  # Get records from data (Commented by Agnirva.com)
    Agnirvafd = pd.DataFrame(Agnirvarecords, columns=Agnirvafields)  # Create DataFrame from records and fields (Commented by Agnirva.com)
    
    # Convert relevant columns to appropriate data types (Commented by Agnirva.com)
    Agnirvafd['cd'] = pd.to_datetime(Agnirvafd['cd'], format='%Y-%b-%d %H:%M')  # Convert 'cd' column to datetime (Commented by Agnirva.com)
    Agnirvafd['dist'] = pd.to_numeric(Agnirvafd['dist'], errors='coerce')  # Convert 'dist' column to numeric, coercing errors (Commented by Agnirva.com)
    Agnirvafd['v_rel'] = pd.to_numeric(Agnirvafd['v_rel'], errors='coerce')  # Convert 'v_rel' column to numeric, coercing errors (Commented by Agnirva.com)
    Agnirvafd['v_inf'] = pd.to_numeric(Agnirvafd['v_inf'], errors='coerce')  # Convert 'v_inf' column to numeric, coercing errors (Commented by Agnirva.com)
    
    return Agnirvafd  # Return the parsed DataFrame (Commented by Agnirva.com)

# Function to visualize the data using Plotly with optional trendline (Commented by Agnirva.com)
def Agnirvavisualize_close_approaches(Agnirvafd, Agnirvabody, Agnirvaadd_trendline=False):  # Define visualization function with optional trendline (Commented by Agnirva.com)
    if Agnirvafd.empty:  # Check if DataFrame is empty (Commented by Agnirva.com)
        return  # Exit function if no data to visualize (Commented by Agnirva.com)
    
    # Check if trendline is requested and statsmodels is installed (Commented by Agnirva.com)
    if Agnirvaadd_trendline:  # If trendline is to be added (Commented by Agnirva.com)
        try:  # Start try block to import statsmodels (Commented by Agnirva.com)
            import statsmodels.api as Agnirvastatsmodels  # Import statsmodels for statistical modeling (Commented by Agnirva.com)
        except ImportError:  # Handle import failure (Commented by Agnirva.com)
            st.warning("‚ö†Ô∏è Statsmodels is not installed. Trendline feature is disabled.")  # Warn user about missing statsmodels (Commented by Agnirva.com)
            Agnirvaadd_trendline = False  # Disable trendline feature (Commented by Agnirva.com)
    
    if Agnirvaadd_trendline:  # Check again if trendline is to be added after import (Commented by Agnirva.com)
        Agnirvatrendline = "ols"  # Set trendline type to Ordinary Least Squares (Commented by Agnirva.com)
    else:  # If trendline is not to be added (Commented by Agnirva.com)
        Agnirvatrendline = None  # No trendline (Commented by Agnirva.com)
    
    Agnirvafig = px.scatter(  # Create a scatter plot using Plotly Express (Commented by Agnirva.com)
        Agnirvafd,  # DataFrame to plot (Commented by Agnirva.com)
        x='cd',  # Set x-axis to 'cd' column (Commented by Agnirva.com)
        y='dist',  # Set y-axis to 'dist' column (Commented by Agnirva.com)
        hover_data=['des', 'v_rel', 'v_inf'],  # Columns to display on hover (Commented by Agnirva.com)
        labels={  # Define labels for the plot (Commented by Agnirva.com)
            'cd': 'üìÖ Date',  # Label for 'cd' axis (Commented by Agnirva.com)
            'dist': f'üìè Distance ({st.session_state.get("dist_unit", "AU")})',  # Label for 'dist' axis with unit (Commented by Agnirva.com)
            'des': 'ü™ê Designation',  # Label for 'des' hover data (Commented by Agnirva.com)
            'v_rel': '‚ö° Relative Velocity (km/s)',  # Label for 'v_rel' hover data (Commented by Agnirva.com)
            'v_inf': '‚àû Infinity Velocity (km/s)'  # Label for 'v_inf' hover data (Commented by Agnirva.com)
        },
        title=f'üî≠ Close Approaches to {Agnirvabody}',  # Set the title of the plot (Commented by Agnirva.com)
        trendline=Agnirvatrendline  # Add trendline if specified (Commented by Agnirva.com)
    )
    
    Agnirvafig.update_yaxes(autorange="reversed")  # Invert y-axis for better visualization (Commented by Agnirva.com)
    st.plotly_chart(Agnirvafig, use_container_width=True)  # Display the Plotly chart in Streamlit (Commented by Agnirva.com)

# Streamlit App (Commented by Agnirva.com)
def Agnirvamain():  # Define the main function for the Streamlit app (Commented by Agnirva.com)
    st.set_page_config(page_title="üåå Agnirva Asteroid & Comet Close Approaches Visualizer", layout="wide")  # Set page configuration (Commented by Agnirva.com)
    st.title("üå† Agnirva Asteroid and Comet Close Approaches Visualizer")  # Set the title of the app (Commented by Agnirva.com)
    st.markdown("""
    Welcome to the **Asteroid and Comet Close Approaches Visualizer**! üöÄ  
    Explore past and future close approaches of asteroids and comets to various celestial bodies.
    Use the sidebar to customize your search parameters and visualize the data interactively.
    """)
    
    # Sidebar for inputs (Commented by Agnirva.com)
    st.sidebar.header("Input Parameters")  # Add header to the sidebar (Commented by Agnirva.com)
    
    # Celestial Body Selection (Commented by Agnirva.com)
    Agnirvabody_display_options = list(AgnirvaBODY_CODES.keys())  # Get list of celestial body display options (Commented by Agnirva.com)
    Agnirvabody_display = st.sidebar.selectbox(  # Create a select box for celestial body selection (Commented by Agnirva.com)
        "ü™ê Select Celestial Body",  # Label for the select box (Commented by Agnirva.com)
        Agnirvabody_display_options,  # Options for selection (Commented by Agnirva.com)
        index=2,  # Default selection index: Earth (Commented by Agnirva.com)
        help="Choose the celestial body you want to analyze close approaches to."  # Help tooltip (Commented by Agnirva.com)
    )
    Agnirvabody_code = AgnirvaBODY_CODES[Agnirvabody_display]  # Get the API code for the selected body (Commented by Agnirva.com)
    
    # Date Range Selection (Commented by Agnirva.com)
    st.sidebar.subheader("Date Range")  # Add subheader for date range (Commented by Agnirva.com)
    Agnirvatoday = datetime.today()  # Get today's date (Commented by Agnirva.com)
    Agnirvadefault_end_date = Agnirvatoday + timedelta(days=60)  # Set default end date to 60 days from today (Commented by Agnirva.com)
    
    Agnirvadate_min = st.sidebar.date_input(  # Create date input for start date (Commented by Agnirva.com)
        "üîπ Start Date",  # Label for start date (Commented by Agnirva.com)
        value=Agnirvatoday,  # Default value: today (Commented by Agnirva.com)
        min_value=datetime(1900, 1, 1),  # Minimum selectable date (Commented by Agnirva.com)
        max_value=datetime(2100, 12, 31),  # Maximum selectable date (Commented by Agnirva.com)
        help="Select the start date for the close approaches data."  # Help tooltip (Commented by Agnirva.com)
    )
    
    Agnirvadate_max_option = st.sidebar.selectbox(  # Create select box for end date option (Commented by Agnirva.com)
        "üî∏ End Date Option",  # Label for end date option (Commented by Agnirva.com)
        options=['Days from Start Date', 'Specific Date'],  # Options available (Commented by Agnirva.com)
        index=0,  # Default selection index (Commented by Agnirva.com)
        help="Choose how to specify the end date for the data range."  # Help tooltip (Commented by Agnirva.com)
    )
    
    if Agnirvadate_max_option == 'Days from Start Date':  # Check if end date is based on days from start (Commented by Agnirva.com)
        Agnirvadays_from_start = st.sidebar.number_input(  # Create number input for days from start date (Commented by Agnirva.com)
            "üìÖ Number of Days from Start Date",  # Label for number input (Commented by Agnirva.com)
            min_value=1,  # Minimum number of days (Commented by Agnirva.com)
            max_value=36525,  # Maximum number of days (100 years) (Commented by Agnirva.com)
            value=60,  # Default number of days (Commented by Agnirva.com)
            step=1,  # Step size for input (Commented by Agnirva.com)
            help="Specify the number of days from the start date to set the end date."  # Help tooltip (Commented by Agnirva.com)
        )
        Agnirvadate_max = (datetime.combine(Agnirvadate_min, datetime.min.time()) + timedelta(days=Agnirvadays_from_start)).strftime('%Y-%m-%d')  # Calculate end date based on days from start (Commented by Agnirva.com)
    elif Agnirvadate_max_option == 'Specific Date':  # Check if end date is a specific date (Commented by Agnirva.com)
        Agnirvadate_max_date = st.sidebar.date_input(  # Create date input for specific end date (Commented by Agnirva.com)
            "üìÖ End Date",  # Label for end date (Commented by Agnirva.com)
            value=Agnirvadefault_end_date,  # Default end date (60 days from today) (Commented by Agnirva.com)
            min_value=Agnirvadate_min,  # Minimum selectable end date is start date (Commented by Agnirva.com)
            max_value=datetime(2100, 12, 31),  # Maximum selectable end date (Commented by Agnirva.com)
            help="Select a specific end date for the close approaches data."  # Help tooltip (Commented by Agnirva.com)
        )
        Agnirvadate_max = Agnirvadate_max_date.strftime('%Y-%m-%d')  # Format end date as string (Commented by Agnirva.com)
    
    # Distance Unit Selection (Commented by Agnirva.com)
    st.sidebar.subheader("Distance Parameters")  # Add subheader for distance parameters (Commented by Agnirva.com)
    Agnirvadist_unit = st.sidebar.selectbox(  # Create select box for distance unit (Commented by Agnirva.com)
        "üìê Distance Unit",  # Label for distance unit selection (Commented by Agnirva.com)
        options=['AU', 'LD'],  # Options: Astronomical Units or Lunar Distances (Commented by Agnirva.com)
        index=0,  # Default selection index: 'AU' (Commented by Agnirva.com)
        help="Choose the unit for maximum distance: Astronomical Units (AU) or Lunar Distances (LD)."  # Help tooltip (Commented by Agnirva.com)
    )
    Agnirvadefault_dist_max = '0.05' if Agnirvadist_unit == 'AU' else '10'  # Set default maximum distance based on unit (Commented by Agnirva.com)
    Agnirvadist_max = st.sidebar.text_input(  # Create text input for maximum distance (Commented by Agnirva.com)
        "üîù Maximum Distance",  # Label for maximum distance (Commented by Agnirva.com)
        value=Agnirvadefault_dist_max,  # Default value based on distance unit (Commented by Agnirva.com)
        help=f"Set the maximum distance for close approaches in {Agnirvadist_unit}."  # Help tooltip with unit (Commented by Agnirva.com)
    )
    
    # Object Type Filter (Commented by Agnirva.com)
    st.sidebar.subheader("Object Type & Results")  # Add subheader for object type and results (Commented by Agnirva.com)
    Agnirvaobject_type = st.sidebar.selectbox(  # Create select box for object type filter (Commented by Agnirva.com)
        "‚òÑÔ∏è Object Type",  # Label for object type selection (Commented by Agnirva.com)
        options=['NEO', 'Comet', 'Both'],  # Options: Near-Earth Objects, Comets, or Both (Commented by Agnirva.com)
        index=0,  # Default selection index: 'NEO' (Commented by Agnirva.com)
        help="Filter results by object type: Near-Earth Objects (NEO), Comets, or Both."  # Help tooltip (Commented by Agnirva.com)
    )
    
    # Number of Results (Commented by Agnirva.com)
    Agnirvalimit = st.sidebar.number_input(  # Create number input for result limit (Commented by Agnirva.com)
        "üìà Number of Results to Fetch",  # Label for number of results (Commented by Agnirva.com)
        min_value=1,  # Minimum number of results (Commented by Agnirva.com)
        max_value=1000,  # Maximum number of results (Commented by Agnirva.com)
        value=100,  # Default number of results (Commented by Agnirva.com)
        step=1,  # Step size for input (Commented by Agnirva.com)
        help="Specify how many close approach records to retrieve."  # Help tooltip (Commented by Agnirva.com)
    )
    
    # Submit Button (Commented by Agnirva.com)
    Agnirvafetch_data = st.sidebar.button("üöÄ Fetch and Visualize Data")  # Create a button to fetch and visualize data (Commented by Agnirva.com)
    
    if Agnirvafetch_data:  # Check if the fetch button was clicked (Commented by Agnirva.com)
        with st.spinner("‚è≥ Fetching data..."):  # Show a spinner while fetching data (Commented by Agnirva.com)
            if Agnirvaobject_type in ['NEO', 'Comet']:  # Check if object type is NEO or Comet (Commented by Agnirva.com)
                # Single API call (Commented by Agnirva.com)
                Agnirvadata = Agnirvafetch_close_approaches(  # Fetch close approach data using API (Commented by Agnirva.com)
                    Agnirvabody_code=Agnirvabody_code,  # Pass celestial body code (Commented by Agnirva.com)
                    Agnirvadate_min=Agnirvadate_min.strftime('%Y-%m-%d'),  # Pass formatted start date (Commented by Agnirva.com)
                    Agnirvadate_max=Agnirvadate_max,  # Pass end date (Commented by Agnirva.com)
                    Agnirvadist_max=Agnirvadist_max,  # Pass maximum distance (Commented by Agnirva.com)
                    Agnirvadist_unit=Agnirvadist_unit,  # Pass distance unit (Commented by Agnirva.com)
                    Agnirvalimit=Agnirvalimit,  # Pass result limit (Commented by Agnirva.com)
                    Agnirvaobject_type=Agnirvaobject_type  # Pass object type (Commented by Agnirva.com)
                )
                Agnirvafd = Agnirvaparse_data(Agnirvadata)  # Parse the fetched data into DataFrame (Commented by Agnirva.com)
            elif Agnirvaobject_type == 'Both':  # Check if object type is Both (Commented by Agnirva.com)
                # Two separate API calls and combine (Commented by Agnirva.com)
                Agnirvadata_neo = Agnirvafetch_close_approaches(  # Fetch NEO data using API (Commented by Agnirva.com)
                    Agnirvabody_code=Agnirvabody_code,  # Pass celestial body code (Commented by Agnirva.com)
                    Agnirvadate_min=Agnirvadate_min.strftime('%Y-%m-%d'),  # Pass formatted start date (Commented by Agnirva.com)
                    Agnirvadate_max=Agnirvadate_max,  # Pass end date (Commented by Agnirva.com)
                    Agnirvadist_max=Agnirvadist_max,  # Pass maximum distance (Commented by Agnirva.com)
                    Agnirvadist_unit=Agnirvadist_unit,  # Pass distance unit (Commented by Agnirva.com)
                    Agnirvalimit=Agnirvalimit,  # Pass result limit (Commented by Agnirva.com)
                    Agnirvaobject_type='NEO'  # Specify object type as 'NEO' (Commented by Agnirva.com)
                )
                Agnirvadata_comet = Agnirvafetch_close_approaches(  # Fetch Comet data using API (Commented by Agnirva.com)
                    Agnirvabody_code=Agnirvabody_code,  # Pass celestial body code (Commented by Agnirva.com)
                    Agnirvadate_min=Agnirvadate_min.strftime('%Y-%m-%d'),  # Pass formatted start date (Commented by Agnirva.com)
                    Agnirvadate_max=Agnirvadate_max,  # Pass end date (Commented by Agnirva.com)
                    Agnirvadist_max=Agnirvadist_max,  # Pass maximum distance (Commented by Agnirva.com)
                    Agnirvadist_unit=Agnirvadist_unit,  # Pass distance unit (Commented by Agnirva.com)
                    Agnirvalimit=Agnirvalimit,  # Pass result limit (Commented by Agnirva.com)
                    Agnirvaobject_type='Comet'  # Specify object type as 'Comet' (Commented by Agnirva.com)
                )
                
                Agnirvafd_neo = Agnirvaparse_data(Agnirvadata_neo)  # Parse NEO data into DataFrame (Commented by Agnirva.com)
                Agnirvafd_comet = Agnirvaparse_data(Agnirvadata_comet)  # Parse Comet data into DataFrame (Commented by Agnirva.com)
                
                # Combine DataFrames (Commented by Agnirva.com)
                Agnirvafd = pd.concat([Agnirvafd_neo, Agnirvafd_comet], ignore_index=True)  # Concatenate NEO and Comet DataFrames (Commented by Agnirva.com)
                Agnirvafd.drop_duplicates(inplace=True)  # Remove duplicate records (Commented by Agnirva.com)
        
        if not Agnirvafd.empty:  # Check if DataFrame is not empty (Commented by Agnirva.com)
            st.success(f"‚úÖ Found {len(Agnirvafd)} close approaches to **{Agnirvabody_display}**.")  # Display success message with count (Commented by Agnirva.com)
            
            # Store DataFrame in Session State (Commented by Agnirva.com)
            st.session_state['Agnirvafd'] = Agnirvafd  # Save DataFrame to session state (Commented by Agnirva.com)
            st.session_state['Agnirvabody_display'] = Agnirvabody_display  # Save selected body display name to session state (Commented by Agnirva.com)
            st.session_state['Agnirvadist_unit'] = Agnirvadist_unit  # Save distance unit to session state (Commented by Agnirva.com)
        else:  # If DataFrame is empty (Commented by Agnirva.com)
            st.session_state['Agnirvafd'] = pd.DataFrame()  # Save empty DataFrame to session state (Commented by Agnirva.com)
            st.session_state['Agnirvabody_display'] = Agnirvabody_display  # Save selected body display name to session state (Commented by Agnirva.com)
            st.session_state['Agnirvadist_unit'] = Agnirvadist_unit  # Save distance unit to session state (Commented by Agnirva.com)
    
    # Check if data is available in session state (Commented by Agnirva.com)
    if 'Agnirvafd' in st.session_state and not st.session_state['Agnirvafd'].empty:  # Check for data in session state (Commented by Agnirva.com)
        Agnirvafd = st.session_state['Agnirvafd']  # Retrieve DataFrame from session state (Commented by Agnirva.com)
        Agnirvabody_display = st.session_state['Agnirvabody_display']  # Retrieve selected body display name (Commented by Agnirva.com)
        Agnirvadist_unit = st.session_state['Agnirvadist_unit']  # Retrieve distance unit (Commented by Agnirva.com)
        
        # Display the data table (Commented by Agnirva.com)
        st.subheader("üìä Close Approach Data")  # Add subheader for data table (Commented by Agnirva.com)
        st.dataframe(Agnirvafd[['des', 'cd', 'dist', 'v_rel', 'v_inf']].rename(columns={  # Display DataFrame with renamed columns (Commented by Agnirva.com)
            'des': 'ü™ê Designation',  # Rename 'des' to 'Designation' (Commented by Agnirva.com)
            'cd': 'üìÖ Date',  # Rename 'cd' to 'Date' (Commented by Agnirva.com)
            'dist': f'üìè Distance ({Agnirvadist_unit})',  # Rename 'dist' to 'Distance' with unit (Commented by Agnirva.com)
            'v_rel': '‚ö° Relative Velocity (km/s)',  # Rename 'v_rel' to 'Relative Velocity' (Commented by Agnirva.com)
            'v_inf': '‚àû Infinity Velocity (km/s)'  # Rename 'v_inf' to 'Infinity Velocity' (Commented by Agnirva.com)
        }))  # End of rename dictionary (Commented by Agnirva.com)
        
        # Download button for CSV (Commented by Agnirva.com)
        Agnirvacsv = Agnirvafd.to_csv(index=False).encode('utf-8')  # Convert DataFrame to CSV and encode (Commented by Agnirva.com)
        st.download_button(  # Create a download button for CSV (Commented by Agnirva.com)
            label="üì• Download Data as CSV",  # Label for download button (Commented by Agnirva.com)
            data=Agnirvacsv,  # Data to download (Commented by Agnirva.com)
            file_name='close_approaches_data.csv',  # Name of the downloaded file (Commented by Agnirva.com)
            mime='text/csv',  # MIME type for CSV (Commented by Agnirva.com)
        )
        
        # Trendline Toggle in Main Area (Commented by Agnirva.com)
        st.markdown("---")  # Add a horizontal separator (Commented by Agnirva.com)
        st.subheader("üìà Visualization")  # Add subheader for visualization (Commented by Agnirva.com)
        Agnirvaadd_trendline = st.checkbox("‚ú® Add Trendline (Requires statsmodels)")  # Create a checkbox to add trendline (Commented by Agnirva.com)
        
        # Visualization (Commented by Agnirva.com)
        Agnirvavisualize_close_approaches(Agnirvafd, Agnirvabody_display, Agnirvaadd_trendline=Agnirvaadd_trendline)  # Call visualization function (Commented by Agnirva.com)
    
    else:  # If no data is available in session state (Commented by Agnirva.com)
        if Agnirvafetch_data:  # Check if fetch button was clicked (Commented by Agnirva.com)
            st.info("‚ÑπÔ∏è No data available to display. Please adjust your search parameters.")  # Inform user no data found (Commented by Agnirva.com)
        else:  # If fetch button was not clicked (Commented by Agnirva.com)
            st.info("üîç Awaiting your search parameters. Use the sidebar to get started!")  # Inform user to provide search parameters (Commented by Agnirva.com)
    
    st.markdown("""
    ---
    **üõ∞Ô∏è Data Source:** JPL's SSD/CNEOS CAD API  
    **üõ†Ô∏è Created by:** Agnirva
    """)

if __name__ == '__main__':  # Check if script is run as main program (Commented by Agnirva.com)
    Agnirvamain()  # Execute the main function to run the Streamlit app (Commented by Agnirva.com)
